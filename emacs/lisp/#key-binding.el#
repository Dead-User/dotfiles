
(require 'msm)
(require 'sov)
(require 'undo-tree)

(msm-define-state normal
  :type normal
  :init-value nil
  :lighter " NORMAL")

(msm-define-state insert
  :type insert
  :init-value nil
  :lighter " INSERT")

(msm-define-state minibuffer
  :type insert
  :init-value nil
  :lighter " MINIBUFFER")

(msm-define-keys normal
		 ((kbd "i") '(lambda () (interactive) (msm-enter-state 'insert)))
		 ((kbd "n") 'sov-forward-char/move)
		 ((kbd "N") 'sov-forward-char/expand)
		 ((kbd "t") 'sov-backward-char/move)
		 ((kbd "T") 'sov-backward-char/expand)
		 ((kbd "h") 'sov-next-line/move)
		 ((kbd "H") 'sov-next-line/expand)
		 ((kbd "r") 'sov-previous-line/move)
		 ((kbd "R") 'sov-previous-line/expand)
		 ((kbd "C-t") 'sov-beginning-of-line/move)
		 ((kbd "C-n") 'sov-end-of-line/move)
		 ((kbd "x") 'sov-line/select)
		 ((kbd "X") 'sov-line/expand)
		 ((kbd "j") 'sov-forward-word/select)
		 ((kbd "J") 'sov-forward-word/expand)
		 ((kbd "k") 'sov-backward-word/select)
		 ((kbd "K") 'sov-backward-word/expand)
		 ((kbd "g g") 'sov-beginning-of-buffer/move)
		 ((kbd "G g") 'sov-beginning-of-buffer/expand)
		 ((kbd "g e") 'sov-end-of-buffer/move)
		 ((kbd "G e") 'sov-end-of-buffer/expand)
		 ((kbd "%") 'sov-select-whole-buffer)
		 ((kbd "d") 'sov-kill)
		 ((kbd "c")
		  '(lambda ()
		     (interactive)
		     (sov-kill)
		     (msm-enter-state 'insert)))
		 ((kbd "y") 'sov-copy-region)
		 ((kbd "u") 'undo-tree-undo)
		 ((kbd "U") 'undo-tree-redo)
		 ((kbd ":") 'execute-extended-command))

(msm-define-keys insert
		 ((kbd "<ESC>") '(lambda () (interactive) (msm-enter-state 'normal))))

(msm-define-keys minibuffer
		 ((kbd "<ESC>") 'exit-minibuffer))

(setq msm-global-default-state 'no
      rmal)
(add-hook 'minibuffer-setup-hook '(lambda () (msm-enter-state 'minibuffer)))
(add-hook 'minibuffer-exit-hook  '(lambda () (msm-pop-state)))

(provide 'key-binding)
